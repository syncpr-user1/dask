name: change_first_order

on:
  push:
  workflow_dispatch:

# Required shell entrypoint to have properly activated conda environments
defaults:
  run:
    shell: bash -l {0}

jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"] #["windows-latest", "ubuntu-latest", "macos-14"]
        environment: ["3.12"] #["3.9", "3.10", "3.11", "3.12"]
        # extra: [null]
        # exclude:
        #   - os: "macos-14"
        #     environment: "3.9"
        #   - os: "macos-14"
        #     environment: "3.10"
        #   - os: "macos-14"
        #     environment: "3.11"
        # include:
        #   # Minimum dependencies
        #   - os: "ubuntu-latest"
        #     environment: "mindeps-array"
        #   - os: "ubuntu-latest"
        #     environment: "mindeps-dataframe"
        #   - os: "ubuntu-latest"
        #     environment: "mindeps-distributed"
        #   - os: "ubuntu-latest"
        #     environment: "mindeps-non-optional"
        #   - os: "ubuntu-latest"
        #     environment: "mindeps-optional"
        #   # Experimental setups
        #   - os: "ubuntu-latest"
        #     environment: "3.12"
        #     extra: "pandas-nightly"

    env:
      PARALLEL: "true"
      COVERAGE: "true"
      HDF5_USE_FILE_LOCKING: "FALSE"

    steps:
      - name: Checkout source
        uses: actions/checkout@v4.1.4
        with:
          fetch-depth: 0  # Needed by codecov.io

      - name: Setup Java
        uses: actions/setup-java@v4
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          distribution: "zulu"
          java-version: "11"

      - name: Setup Conda Environment
        uses: conda-incubator/setup-miniconda@v3.0.4
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          channel-priority: strict
          environment-file: continuous_integration/environment-${{ matrix.environment }}.yaml
          activate-environment: test-environment
          auto-activate-base: false

      - name: Test pandas nightlies (only with dask-expr)
        if: ${{ matrix.extra == 'pandas-nightly' }}
        run: python -m pip install --pre --extra-index https://pypi.anaconda.org/scientific-python-nightly-wheels/simple pandas -U

      - name: Reconfigure pytest-timeout
        # No SIGALRM available on Windows
        if: ${{ matrix.os != 'windows-latest' }}
        run: sed -i.bak 's/timeout_method = "thread"/timeout_method = "signal"/' pyproject.toml

      - name: Install
        run: source continuous_integration/scripts/install.sh
      
      - name: Install pytest-ranking
        run: pip install pytest-ranking

      - name: Restore pytest-ranking cache
        id: restore-pytest-ranking-cache
        if: always()
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/.pytest_cache/v/pytest_ranking_data
          key: pytest-ranking-cache-${{ github.workflow }}-${{ runner.os }}-${{ matrix.python }}
      
      - name: Run tests
        id: run_tests
        run: |
          set -e

          if [[ $PARALLEL == 'true' ]]; then
              export XTRATESTARGS="-n4 $XTRATESTARGS"
          fi

          if [[ $COVERAGE == 'true' ]]; then
              export XTRATESTARGS="--cov=dask --cov-report=xml --junit-xml pytest.xml $XTRATESTARGS"
          fi

          echo "pytest -v --durations=0 dask --rank --rank-weight=0-0-1 --runslow $XTRATESTARGS"
          pytest -v --durations=0 dask --rank --rank-weight=0-0-1 --runslow $XTRATESTARGS

          set +e
      
      - name: Save pytest-ranking cache
        id: save-pytest-ranking-cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/.pytest_cache/v/pytest_ranking_data
          key: pytest-ranking-cache-${{ github.workflow }}-${{ runner.os }}-${{ matrix.python }}-${{ github.run_id }}

      # - name: Coverage
      #   uses: codecov/codecov-action@v3

      # # The environment file is created in continuous_integration/scripts/install.sh
      # # and can be useful when debugging locally
      # - name: Upload conda environment and test results
      #   # ensure this runs even if pytest fails
      #   if: >
      #     always() &&
      #     (steps.run_tests.outcome == 'success' || steps.run_tests.outcome == 'failure')
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ matrix.os }}-${{ matrix.environment }}-${{ matrix.extra }}
      #     path: |
      #       pytest.xml
      #       env.yaml

  # Publish an artifact for the event; used by publish-test-results.yaml
  # event_file:
  #   # Do not run the schedule job on forks
  #   if: github.repository == 'dask/dask' || github.event_name != 'schedule'
  #   name: "Event File"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Upload
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: Event File
  #         path: ${{ github.event_path }}
